version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.12.0

jobs:
  build:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  Docker:
    machine: true
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: run_docker
          command: |
            docker build -t capstone_helloworld .
            docker image ls
            docker run -p 8080:80 -d capstone_helloworld
            netstat -tulpn
            curl -v http://localhost:8080/index.html
      - run:
          name: Docker upload
          command: |
            dockerpath="yassminabubakr/capstone_helloworld"
            docker login --username=yassminabubakr --password=$DOCKER_PASSWORD &&\
                docker image tag capstone_helloworld $dockerpath
            docker image push $dockerpath
    
  create-cluster:
    executor: aws-eks/python3
    steps:
      - run:
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/download/0.20.0/eksctl_Linux_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: my-eks-nginxhelloworld

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployments/nginx-deployment/deployment.yaml"
          resource-name: "deployment/nginx-deployment"
          get-rollout-status: true
          show-kubectl-command: true

  create-test:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get svc
            kubectl get pods
            kubectl describe pods
            kubectl get nodes
            kubectl get deployment
            kubectl describe service nginx-deployment
            kubectl get services -o wide

  update-deployment: ## use different image to make sure it actually changes
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - run:
          name: Get Old Nodes
          command: |
            kubectl get nodes
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployments/nginx-deployment/deployment2.yaml"
          resource-name: "deployment/nginx-deployment"
          get-rollout-status: true
          show-kubectl-command: true
      - run:
         command: |
            kubectl rollout status deployment nginx-deployment
            kubectl get deployment nginx-deployment
      - run:
          name: Get New Nodes
          command: |
            kubectl get nodes

  undeploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/delete-resource:
          resource-types: "deployment,service"
          label-selector: "nginx-deployment"
          wait: true
      - run:
          name: Check on pod status
          command: |
            kubectl get pods
  
  delete-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - run:
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/download/0.20.0/eksctl_Linux_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/delete-cluster:
          cluster-name: << parameters.cluster-name >>

workflows:
  default:
    jobs:
      - build
      - Docker
      # - create-cluster
      # - create-deployment:
      #     cluster-name: my-eks-nginxhelloworld
      #     requires:
      #       - create-cluster
      # - create-test:
      #     cluster-name: my-eks-nginxhelloworld
      #     requires:
      #       - create-deployment
      - update-deployment:
          cluster-name: my-eks-nginxhelloworld
          # requires:
          #   - create-deployment
      # - undeploy-application:
      #     cluster-name: my-eks-nginxhelloworld
      #     requires:
      #       - update-deployment
      # - delete-cluster:
      #     cluster-name: my-eks-nginxhelloworld
      #     requires:
      #       - undeploy-application

